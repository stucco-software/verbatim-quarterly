{
  "type": "Epistola",
  "title": "EPISTOLA Benjamin H. Cohen",
  "contributor": "Benjamin H. Cohen",
  "html": "<link rel=\"type\" href=\"Epistola\"><h1 data-rel=\"title\">EPISTOLA <span data-rel=\"contributor\">Benjamin H. Cohen</span></h1>\n<p>I noted the references to <em>tweeter</em> and <em>boomer</em> or\n<em>wow</em> and <em>hum</em> in Harry Cohen's article, “Jingo\nLingo” [XVI,4].  I had expected to find <em>tweeter</em> followed\nby <em>woofer</em> and <em>wow</em> followed by <em>flutter</em>.  I\nhave no dictionary that records <em>boomer</em> as an audio\nelectronics term but two that record <em>woofer</em>.  I suspect\nthat <em>hum</em> is used by those of us who can't tell\n<em>wow</em> from <em>flutter</em>.</p>\n<p>While reading OBITER DICTA in the same issue, I\nfound myself in total agreement about the poor\nquality of the manuals that accompany computer\nhardware and software.  But while improving manuals\nwould reduce the number of telephone calls, the\nassertion that reduction by a factor of 10 could be\nachieved assumes that the users could actually be\ninduced into looking at the manuals!  Those who\nhave actually answered telephone calls from users\ncan tell you that if patriotism is the last refuge of a\nscoundrel, then the manual is the last refuge of the\ncomputer user.  A call to customer support comes\nwell ahead of reading the manual, even when it's\ngood and well indexed.  We often have to bite our\ntongues to lkeep from shouting, “f*****\nmanual!”</p>\n<p>Your assumption that your program's spelling\nchecker contains about 37,000 words because it\ncontains about 223,000 characters is mistaken.\nComputer programmers are cleverer than that.  The\nfirst spelling checker that I bought had a word list\nfile of approximately 30,000 characters.  It used a\n“hashing” technique, storing word roots, suffixes,\nand prefixes.  In operation it would strip recognized\nsuffixes and prefixes from words, check for the word\nroot, and use rules stored in the program to determine\nwhether the suffixes and prefixes were added\ncorrectly.  According to the manual, the file compression\ntechniques used the 30,000 character dictionary\nto list about 18,500 root words.  When\nchecked against a 42,000-word dictionary, the program\nwas said to have achieved a 96% recognition\nrate.</p>\n<p><em>[Benjamin H. Cohen, Niles, Illinois]</em></p>\n<p>[In the early 1960s I designed a hyphenation program\n(for automatic typesetting) based on a logic of\nprefix-root-suffix combined with a table look-up (for\nanomalies: for instance, before analysis of a word\nending in <em>-ing</em>, the word would be checked against a\nlist including <em>thing, bring, string</em>, and other words\nthat could not be hyphenated).  Examination of the\natrocious hyphenation exhibited by many typographers\ntoday is demonstration enough of the lack of\ninterest in such affairs.  Recently Americanizing a\nBritish text using the American spelling checker in\nmy Framework <em>III</em> program, <em>I</em> discovered that the\nprogram is ignorant of American preferred spellings,\nlike <em>labeled vs labelled, traveler vs traveller,</em> though\nit catches <em>travelling</em>.  What boots it to point out that\nmany Americans are likewise ignorant of those\n“preferences”?  It seems redundant to point out that\nall offers I have made in the past to put Ashton-Tate\non the right track regarding language (and manuals)\nhave been ignored, though it is hard to say whether\nthat is out of their arrogance, their ignorance, or\ntheir inability to read my letters.—<em>Editor</em>]</p>\n<hr>\n<p>I read with interest the account of your experience\nwith the Ashton-Tate word-processing program\nFramework <em>III</em> [<em>XVI</em>,4].  I was especially interested\nin the results you got when invoking the SUGGEST\noption in the program's spelling checker.  You were\nat a loss to explain the rationale for the program's\nselection of <em>rattans</em> as an alternative for <em>awakens</em>.</p>\n<p>In the late 1970s, I worked as a clerk in the\nmedical records department of a large medical\nclinic.  When I had the name of a patient but not his\nchart number, I checked with the medical records\ncorrection clerks.  They sat at a computer terminals\nand would key in some kind of alphanumeric code\nthat evoked many names.  The name <em>Wise</em>, for example,\nalso evoked names like <em>Weese, Weiss</em>, and <em>Weisz</em>,\nbut also such unlikely variants as <em>Waage, Wacha,\nWahoske, Wick</em>, and <em>Woiak</em>.  When I became a correction\nclerk myself, I learned that the system behind\nthis name-grouping was a filing system called\nSoundex.  Soundex works mostly by ignoring the\nvowels in a name and assigning an alphanumeric\ncode to the name based on the remaining consonants.\nThus, <em>Wise</em> was given the Soundex code W200.</p>\n<h2></h2>",
  "preview": "<link rel=\"type\" href=\"Epistola\"> <h1 data-rel=\"title\">EPISTOLA <span data-rel=\"contributor\">Benjamin H. Cohen</span></h1> <p>I noted the references to <em>tweeter</em> and <em>boomer</em> or\n<em>wow</em> and <em>hum</em> in Harry Cohen's article, “Jingo\nLingo” [XVI,4].  I had expected to find <em>tweeter</em> followed\nby <em>woofer</em> and <em>wow</em> followed by <em>flutter</em>.  I\nhave no dictionary that records <em>boomer</em> as an audio\nelectronics term but two that record <em>woofer</em>.  I suspect\nthat <em>hum</em> is used by those of us who can't tell\n<em>wow</em> from <em>flutter</em>.</p> <p>While reading OBITER DICTA in the same issue, I\nfound myself in total agreement about the poor\nquality of the manuals that accompany computer\nhardware and software.  But while improving manuals\nwould reduce the number of telephone calls, the\nassertion that reduction by a factor of 10 could be\nachieved assumes that the users could actually be\ninduced into looking at the manuals!  Those who\nhave actually answered telephone calls from users\ncan tell you that if patriotism is the last refuge of a\nscoundrel, then the manual is the last refuge of the\ncomputer user.  A call to customer support comes\nwell ahead of reading the manual, even when it's\ngood and well indexed.  We often have to bite our\ntongues to lkeep from shouting, “f*****\nmanual!”</p> <p>Your assumption that your program's spelling\nchecker contains about 37,000 words because it\ncontains about 223,000 characters is mistaken.\nComputer programmers are cleverer than that.  The\nfirst spelling checker that I bought had a word list\nfile of approximately 30,000 characters.  It used a\n“hashing” technique, storing word roots, suffixes,\nand prefixes.  In operation it would strip recognized\nsuffixes and prefixes from words, check for the word\nroot, and use rules stored in the program to determine\nwhether the suffixes and prefixes were added\ncorrectly.  According to the manual, the file compression\ntechniques used the 30,000 character dictionary\nto list about 18,500 root words.  When\nchecked against a 42,000-word dictionary, the program\nwas said to have achieved a 96% recognition\nrate.</p> <p><em>[Benjamin H. Cohen, Niles, Illinois]</em></p>"
}